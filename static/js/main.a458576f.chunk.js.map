{"version":3,"sources":["component/Counters.jsx","component/Navbar.jsx","App.js","serviceWorker.js","index.js"],"names":["Counters","formatcounter","value","props","counter","getclasses","classes","className","this","onClick","onIncrement","onDecrement","disabled","onDelete","id","Component","Navbar","totalcounter","App","state","counters","handelIncrement","index","indexOf","setState","handelDecrement","handelDelete","filter","c","handelReset","map","length","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a458576f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass Counters extends Component {\r\n   \r\n    formatcounter=() =>{\r\n        const {value} = this.props.counter;\r\n        return value === 0 ? \"zero\" : value ;\r\n    }\r\n\r\n    getclasses=()=>{\r\n        let classes='badge m-2 col-md-2 badge-';\r\n        classes += (this.props.counter.value === 0) ? 'warning' : 'primary';\r\n        return classes;\r\n    }\r\n    \r\n    render() { \r\n       \r\n        return ( \r\n            <div className='container'>\r\n                <div className='row'>\r\n                    <div className='col-md-4 d-flex'>\r\n                        <span className={this.getclasses()}  > {this.props.counter.value} </span>\r\n                        <div className='col-md-10 d-flex'>\r\n                            <button onClick={()=> this.props.onIncrement(this.props.counter)} className='btn btn-secondary btn-sm m-1'>+</button>\r\n                            <button onClick={()=> this.props.onDecrement(this.props.counter)} disabled={this.props.counter.value===0 ? 'disabled' : \"\"} className='btn btn-secondary btn-sm m-1'>-</button>\r\n                            <button onClick={() => this.props.onDelete(this.props.counter.id)} className='btn btn-danger btn-sm m-1'>X</button>\r\n                        </div>  \r\n                    </div>    \r\n                </div>\r\n            </div>\r\n         );\r\n    }\r\n}\r\n \r\nexport default Counters;\r\n","import React from 'react';\r\n\r\nconst Navbar = (props) => {\r\n    return ( \r\n        <div className='container'>\r\n            <nav className=\"navbar navbar-light bg-darkgray\">\r\n                <a className=\"navbar-brand\" >Navbar{\" \"}\r\n                    <span className='badge badge-pill badge-danger'> {props.totalcounter} </span>\r\n                </a>\r\n            </nav>\r\n        </div>\r\n     );\r\n}\r\n \r\nexport default Navbar;","import React, { Component , Fragment } from 'react';\nimport Counters from './component/Counters';\nimport Navbar from './component/Navbar';\nimport './App.css';\n\n\nclass App extends Component {\n  state = { \n    counters :[\n      {id:1 , value:0},\n      {id:2 , value:4},\n      {id:3 , value:0},\n      {id:4 , value:0}\n    ]\n   }\n   handelIncrement=(counter)=>{\n    const counters=[...this.state.counters];\n    const index=counters.indexOf(counter)\n    counters[index]={...counter}\n    counters[index].value++;\n    this.setState({ counters })\n   }\n   handelDecrement=(counter)=>{\n    const counters=[...this.state.counters];\n    const index=counters.indexOf(counter)\n    counters[index]={...counter}\n    counters[index].value--;\n    this.setState({ counters })\n   }\n   handelDelete=(id)=>{\n    let counters=this.state.counters.filter(c => c.id !== id);\n    this.setState({counters})\n   }\n   handelReset=()=>{\n     let counters=this.state.counters.map(c=> {\n       c.value=0;\n       return c;\n     })\n     this.setState({ counters })\n   }\n  render() { \n    return ( \n      <section className='App'>\n        <Navbar  totalcounter={this.state.counters.filter(c=>c.value>0).length} />\n        <div className='container'>\n          <div className='row'>\n              <button onClick={this.handelReset} className='btn btn-success m-3 ml-4'>Reset</button>\n          </div>\n        </div>\n        {this.state.counters.map(counter=>\n          <Counters key={counter.id}\n           counter={counter} \n           onDelete={this.handelDelete} \n           onIncrement={this.handelIncrement}\n           onDecrement={this.handelDecrement}          \n           />\n          )}\n       \n\n      </section>\n     );\n  }\n}\n \nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}